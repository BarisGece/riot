plugins {
    id 'net.researchgate.release' version '2.8.1'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'org.ajoberstar.git-publish' version '3.0.0'
    id 'com.github.ben-manes.versions' version '0.36.0'
    id 'org.springframework.boot' version '2.4.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.github.breadmoirai.github-release' version '2.2.12'
}

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'eclipse'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    archivesBaseName = 'riot-' + project.name
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
    }
    tasks.withType(Tar) {
        compression = Compression.GZIP
    }
    bootJar {
        enabled = false
    }
    jar {
        enabled = true
    }
    dependencyManagement {
        imports {
            mavenBom 'org.apache.logging.log4j:log4j-bom:2.14.0'
        }
    }
    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        implementation group: 'info.picocli', name: 'picocli', version: picocli_version
        annotationProcessor group: 'info.picocli', name: 'picocli-codegen', version: picocli_version
        implementation 'org.apache.logging.log4j:log4j-api'
        implementation 'org.apache.logging.log4j:log4j-core'
        implementation 'org.apache.logging.log4j:log4j-slf4j-impl'
        implementation 'org.slf4j:jcl-over-slf4j'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine'        
        testImplementation 'org.springframework.batch:spring-batch-test'
        testImplementation 'org.hsqldb:hsqldb'
    }
    configurations {
        all*.exclude module: 'spring-boot-starter-logging'
    }
    test {
        useJUnitPlatform()
    }
    if (project.name != 'connectors') {
        eclipse {
            project {
                name = 'riot-' + project.name
            }
        }
    }
    if (project.path.contains('connectors')) {
        apply plugin: 'application'
        application {
            applicationName = 'riot-' + project.name
        }
        dependencies {
            implementation project(':core')
            testImplementation project(':test')    
        }
    }
}

release {
    tagTemplate = 'v${version}'
    buildTasks = ['releaseBuild']
}

task releaseBuild {
    dependsOn subprojects.findResults { it.tasks.findByName('build') }
}

asciidoctor {
    baseDir = "docs"
    sourceDir = "docs"
    resources {
        from("${sourceDir}/images") {
            exclude '*.excalidraw'
            into 'images'
        }
        from("connectors/file/src/test/resources/csv") {
            include '*.csv'
            into '.'
        }
        from("connectors/file/src/test/resources/json") {
            include '*.json'
            into '.'
        }
        from("connectors/file/src/test/resources/xml") {
            include '*.xml'
            into '.'
        }
    }
    
    outputOptions {
        separateOutputDirs = false
    }
}

gitPublish {
    repoUri = 'git@github.com:redis-developer/riot.git'
    referenceRepoUri = 'file:///Users/jruaux/git/riot/'
    branch = 'gh-pages'
    contents {
        from 'build/docs/asciidoc'
    }
}

def isNonStable = { String version ->
  def nonStableKeyword = ['PREVIEW'].any { it -> version.toUpperCase().contains(it) }
  def stableKeyword = ['RELEASE', 'FINAL', 'GA', 'JRE8'].any { it -> version.toUpperCase().contains(it) }
  def regex = /^[0-9,.v-]+([.-]r)?$/
  return nonStableKeyword || (!stableKeyword && !(version ==~ regex))
}

tasks.named("dependencyUpdates").configure {

  rejectVersionIf {
    isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
  }

}

githubRelease {
    token = project.hasProperty('githubToken') ? project.property('githubToken') : ''
    owner "redis-developer"
    repo "riot"
    releaseAssets "connectors/db/build/distributions/riot-db-${project.version}.zip", "connectors/file/build/distributions/riot-file-${project.version}.zip", "connectors/gen/build/distributions/riot-gen-${project.version}.zip", "connectors/redis/build/distributions/riot-redis-${project.version}.zip", "connectors/stream/build/distributions/riot-stream-${project.version}.zip"
    body changelog()
    draft true
}

gitPublishPush.dependsOn asciidoctor
afterReleaseBuild.dependsOn ":githubRelease"
afterReleaseBuild.dependsOn gitPublishPush