plugins {
    id 'application'
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'com.jfrog.bintray' version '1.8.5'
    id 'com.github.ben-manes.versions' version '0.28.0'
    id 'net.researchgate.release' version '2.8.1'
    id 'com.github.breadmoirai.github-release' version '2.2.12'
    id 'org.asciidoctor.jvm.convert' version '3.2.0'
    id 'org.ajoberstar.git-publish' version '2.1.3'
}

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
}

ext {
    set('springCloudVersion', "Hoxton.SR5")
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}

dependencies {
    implementation 'com.redislabs:picocli-redis:2.0.0'
    implementation 'org.slf4j:slf4j-jdk14'
    implementation 'org.latencyutils:LatencyUtils:2.0.3'
    implementation 'com.redislabs:spring-batch-redis:2.1.1-SNAPSHOT'
//    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
//    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'com.redislabs:spring-batch-redisearch:2.3.1'
    implementation 'org.springframework.batch:spring-batch-core'
    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    implementation 'org.springframework:spring-jdbc'
    implementation 'org.springframework.cloud:spring-cloud-aws-context'
    implementation 'org.springframework.cloud:spring-cloud-aws-autoconfigure'
    implementation 'org.ruaux:spring-batch-resource:1.0.0'
    implementation 'org.ruaux:spring-batch-faker:1.0.1'
    implementation 'org.ruaux:spring-batch-xml:1.0.0'
    implementation 'com.zaxxer:HikariCP'
    implementation 'me.tongfei:progressbar:0.8.1'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.slf4j:slf4j-jdk14'
    testImplementation 'org.codehaus.plexus:plexus-utils:3.3.0'
    testImplementation 'org.hsqldb:hsqldb'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'it.ozimov:embedded-redis:0.7.3'
    testImplementation 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
//    implementation 'org.xerial:sqlite-jdbc:3.28.0'
//    implementation 'com.ibm.db2:jcc:11.5.0.0'
//    implementation 'com.microsoft.sqlserver:mssql-jdbc:7.4.1.jre8'
//    implementation 'com.oracle.ojdbc:ojdbc8:19.3.0.0'
//    implementation 'org.postgresql:postgresql:42.2.8'
}

configurations {
    all*.exclude module : 'spring-boot-starter-logging'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : ''
    key = project.hasProperty('bintrayKey') ? project.property('bintrayKey') : ''
    publications = ['mavenJava']
    publish = true
    pkg {
        repo = 'maven'
        name = 'riot'
        licenses = ['Apache-2.0']
        vcsUrl = 'https:/ / github.com / Redislabs - Solution - Architects / riot.git '
    version {
        gpg {
            sign = true
        }
        mavenCentralSync {
            sync = true
            user = project.hasProperty('ossrhUsername') ? project.property('ossrhUsername') : ''
            password = project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : ''
        }
    }
}
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId 'com.redislabs'
            artifactId 'riot'

            pom {
                name = 'RIOT'
                packaging = 'jar'
                description = 'Redis Input/Output Tool'
                url = 'https://github.com/Redislabs-Solution-Architects/riot'

                scm {
                    connection = 'scm:git:git://github.com/Redislabs-Solution-Architects/riot.git'
                    developerConnection = 'scm:git:git@github.com:Redislabs-Solution-Architects/riot.git'
                    url = 'https://github.com/Redislabs-Solution-Architects/riot'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'jruaux'
                        name = 'Julien Ruaux'
                    }
                }
            }
        }
    }
}

group = 'com.redislabs'
description = 'RIOT'
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

application {
    mainClassName = 'com.redislabs.riot.Riot'
}

jar {
    manifest {
        attributes("Implementation-Title": "RIOT",
                "Implementation-Version": archiveVersion)
    }
}

tasks.withType(Tar) {
    compression = Compression.GZIP
}

asciidoctor {
    outputOptions {
        separateOutputDirs = false
    }
    attributes 'commandsdir': 'src/test/resources/commands'
}

task printVersion {
    doLast {
        println project.version
    }
}

githubRelease {
    token = project.hasProperty('githubToken') ? project.property('githubToken') : ''
    owner "Redislabs-Solution-Architects"
    repo "riot"
    releaseAssets distZip, distTar
    body changelog()
}

gitPublish {
    repoUri = 'git@github.com:Redislabs-Solution-Architects/riot.git'
    referenceRepoUri = 'file:///Users/jruaux/git/riot/'

    branch = 'gh-pages'

    contents {
        from 'build/docs/asciidoc'
    }
}

gitPublishPush.dependsOn asciidoctor

afterReleaseBuild.dependsOn ":githubRelease"
afterReleaseBuild.dependsOn bintrayUpload
afterReleaseBuild.dependsOn gitPublishPush