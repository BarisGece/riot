config {
    info {
        description = 'Redis Input/Output Tools'
        inceptionYear = '2020'
        vendor = 'Redis Labs'
        tags = ['redis', 'data', 'import', 'export', 'generator', 'file', 'sql', 'replication']
        links {
            website = 'https://github.com/redis-developer/${project.rootProject.name}'
            issueTracker = 'https://github.com/redis-developer/${project.rootProject.name}/issues'
            scm = 'https://github.com/redis-developer/${project.rootProject.name}.git'
        }
        scm {
            url = "https://github.com/redis-developer/${project.rootProject.name}"
            connection = "scm:git:https://github.com/redis-developer/${project.rootProject.name}.git"
            developerConnection = "scm:git:git@github.com:redis-developer/${project.rootProject.name}.git"
        }
        specification {
            enabled = true
        }
        implementation {
            enabled = true
        }
        people {
            person {
                id = 'jruaux'
                name = 'Julien Ruaux'
                roles = ['developer', 'author']
            }
        }
        publishing {
            signing {
                enabled = true
            }
        }
    }
    licensing {
        enabled = false
        licenses {
            license {
                id = 'Apache-2.0'
            }
        }
    }
    docs {
        javadoc {
            autoLinks {
                enabled = false
            }
        }
        sourceHtml {
            enabled = false
        }
    }
}

allprojects {
    repositories {
        gradlePluginPortal()
        mavenCentral()
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/redis-developer/registry")
            credentials {
                username = project.findProperty("github.username") ?: System.getenv("GITHUB_USERNAME")
                password = project.findProperty("github.token") ?: System.getenv("GITHUB_TOKEN")
            }
        }
        mavenLocal()
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }
}

subprojects {
    config {
        info {
            description = project.project_description
        }
    }
}


jreleaser {
    project {
        longDescription = 'Get data in and out of Redis with RIOT'
        website = 'https://developer.redislabs.com/riot'
        copyright = '2021 Julien Ruaux'
        java {
            multiProject = true
        }
    }
    release {
        github {
            owner = 'redis-developer'
            overwrite = true
            changelog {
                enabled = true
                formatted = 'ALWAYS'
                change = '- {{commitShortHash}} {{commitTitle}}'
                labeler {
                    label = 'feature'
                    title = 'Resolves #'
                    body = 'Resolves #'
                }
                labeler {
                    label = 'issue'
                    title = 'Fixes #'
                    body = 'Fixes #'
                }
                labeler {
                    label = 'issue'
                    title = 'Relates to #'
                    body = 'Relates to #'
                }
                labeler {
                    label = 'task'
                    title = '[chore]'
                }
                category {
                    title = 'ðŸš€ Features'
                    labels = ['feature']
                }
                category {
                    title = 'âœ… Issues'
                    labels = ['issue']
                }
                category {
                    title = 'ðŸ§° Tasks'
                    labels = ['task']
                }
                replacer {
                    search = '\\[chore\\]\\s'
                    replace = ''
                }
            }
        }
    }
    distributions {
        ['riot-db', 'riot-file', 'riot-gen', 'riot-redis', 'riot-stream'].each { n ->
            "$n" {
                brew {
                    active = 'release'
                    formulaName = "${n}"
                }
                scoop {
                    active = 'release'
                    bucket {
                        name = 'scoop'
                    }
                }
                artifacts {
                    artifact {
                        path = "connectors/{{distributionName}}/build/distributions/{{distributionName}}-{{projectVersion}}.zip"
                    }
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype()
    }
}
