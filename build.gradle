config {
    info {
        description = 'Redis Input/Output Tools'
        inceptionYear = '2020'
        vendor = 'Redis'
        tags = ['redis', 'tool', 'import', 'export', 'replication']
                
        links {
            website = 'https://github.com/redis-developer/riot'
            issueTracker = 'https://github.com/redis-developer/riot/issues'
            scm = 'https://github.com/redis-developer/riot.git'
        }
        
        scm {
            url = "https://github.com/redis-developer/riot"
            connection = "scm:git:https://github.com/redis-developer/riot.git"
            developerConnection = "scm:git:git@github.com:redis-developer/riot.git"
        }
        
        specification {
            enabled = true
        }
        
        implementation {
            enabled = true
        }
        
        people {
            person {
                id = 'jruaux'
                name = 'Julien Ruaux'
                roles = ['developer', 'author']
            }
        }
        
    }
    
    docs {
        javadoc {
            autoLinks {
                enabled = false
            }
        }
        sourceHtml {
            enabled = false
        }
    }
    
    licensing {
        enabled = false
        licenses {
            license {
                id = 'Apache-2.0'
            }
        }
    }

    coverage {
        jacoco {
            enabled = true
            toolVersion = jacocoVersion
        }
    }
}

allprojects {
    repositories {
        mavenLocal()
        gradlePluginPortal()
    }
    
    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }
    
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}

subprojects {
    config {
        info {
            description = project.project_description
        }
    }

    license {
        exclude('build/**')
    }
    
    dependencies {
        compileOnly group: 'com.google.code.findbugs', name: 'jsr305', version: jsr305Version
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        testImplementation group: 'commons-io', name: 'commons-io', version: commonsIoVersion
        testImplementation group: 'com.redis.testcontainers', name: 'testcontainers-redis-junit', version: testcontRedisVersion
    }

    test {
        useJUnitPlatform()
    }

    bootJar {
        enabled = false
    }

    jar {
        enabled = true
        archiveClassifier = ''
    }

    configurations {
        all*.exclude module: 'spring-boot-starter-logging'
    }
    
    configurations.all {
		resolutionStrategy.eachDependency { DependencyResolveDetails details ->
			if (details.requested.name == 'lettuce-core' ) {
				details.useVersion lettuceVersion
			}
		}
	}
    
    asciidoctor {
	    inProcess = JAVA_EXEC
	    forkOptions {
	        jvmArgs("--add-opens","java.base/sun.nio.ch=ALL-UNNAMED","--add-opens","java.base/java.io=ALL-UNNAMED")
	    }
	    resources {
	    	from("$rootDir/core/riot-core/src/docs/resources/images") {
	     		include '**/*'
	   		}
	    }
	    baseDirFollowsSourceFile()
	    attributes \
        'icons': 'font',
        'docinfo1': '',
        'includedir': "$rootDir/core/riot-core/src/docs/asciidoc",
        'sectanchors': 'true',
        'source-highlighter': 'coderay',
        'coderay-linenums-mode': 'table',
        'test-resources': "$projectDir/src/test/resources",
        'toc': 'left',
        'numbered': 'true',
        'linkattrs': 'true',
        'linkcss': 'true',
        'project-name': project.name,
        'project-title': config.info.description
	}
}
