# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching *, i.e. 1.0, 20.15.10

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Get the version
      id: get_version
      run: echo ::set-output name=version::${GITHUB_REF/refs\/tags\/v/}      
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: gradle build
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: false
    - name: Upload RIOT DB
      id: upload-riot-db-zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./riot-connectors/riot-db/build/distributions/riot-db-${{ steps.get_version.outputs.version }}.zip
        asset_name: riot-db-${{ steps.get_version.outputs.version }}.zip
        asset_content_type: application/zip
    - name: Upload RIOT File
      id: upload-riot-file-zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./riot-connectors/riot-file/build/distributions/riot-file-${{ steps.get_version.outputs.version }}.zip
        asset_name: riot-file-${{ steps.get_version.outputs.version }}.zip
        asset_content_type: application/zip
    - name: Upload RIOT Gen
      id: upload-riot-gen-zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./riot-connectors/riot-gen/build/distributions/riot-gen-${{ steps.get_version.outputs.version }}.zip
        asset_name: riot-gen-${{ steps.get_version.outputs.version }}.zip
        asset_content_type: application/zip
    - name: Upload RIOT Redis
      id: upload-riot-redis-zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./riot-connectors/riot-redis/build/distributions/riot-redis-${{ steps.get_version.outputs.version }}.zip
        asset_name: riot-redis-${{ steps.get_version.outputs.version }}.zip
        asset_content_type: application/zip
